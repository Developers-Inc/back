name: Deploy

on: 
  release:
    types: [published]
  workflow_dispatch:
  
env:
  AWS_REGION: sa-east-1
  ECR_REGISTRY: public.ecr.aws
  ECR_REGISTRY_NAME: developers-inc
  ECR_REPOSITORY: developersinc-back
  ECS_TASK_DEFINITION: DevelopersIncTaskDefinition
  CONTAINER_NAME: DevelopersIncBackContainer
  ECS_SERVICE: DevelopersIncService
  ECS_CLUSTER: DevelopersIncCluster
  IMAGE_TAG: ${{ github.ref_name }}

jobs:
  Build:
    runs-on: ubuntu-latest
    environment: production
    
    strategy:
      matrix:
        jdk-version: [17]
    
    steps:
      - name: Configure AWS credentials for ECR
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-east-1
    
      - name: Login to Amazon ECR
        uses: aws-actions/amazon-ecr-login@v1
        with:
          registry-type: public
          
      - name: Checkout
        uses: actions/checkout@v3
      
      - name: Use JDK ${{ matrix.jdk-version }}
        uses: actions/setup-java@v3.4.1
        with:
          java-version: ${{ matrix.jdk-version }}
          distribution: 'microsoft'
      
      - name: Cache Dependencies
        uses: actions/cache@v3.0.7
        with:
          path: ~/.m2/repository
          key: ${{ runner.os }}-maven-${{ hashFiles('**/pom.xml') }}
          restore-keys: ${{ runner.os }}-maven-
                
      - name: Build Project and Run Unit Tests
        run: mvn -B package
      
      - name: Build, tag, and push image to Amazon ECR
        run: |
          docker build -t $ECR_REGISTRY/$ECR_REGISTRY_NAME/$ECR_REPOSITORY:$IMAGE_TAG .
          docker tag $ECR_REGISTRY/$ECR_REGISTRY_NAME/$ECR_REPOSITORY:$IMAGE_TAG $ECR_REGISTRY/$ECR_REGISTRY_NAME/$ECR_REPOSITORY:latest
          docker push $ECR_REGISTRY/$ECR_REGISTRY_NAME/$ECR_REPOSITORY:$IMAGE_TAG
          docker push $ECR_REGISTRY/$ECR_REGISTRY_NAME/$ECR_REPOSITORY:latest
          echo "::set-output name=image::$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG"
          
  Deploy:
    needs: Build
    runs-on: ubuntu-latest
    environment: production
    
    steps:
      - name: Configure AWS credentials for ECS
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }} 
      
      - name: Download task definition
        run: |
          mkdir .aws
          touch .aws/task-definition.json
          aws ecs describe-task-definition --task-definition $ECS_TASK_DEFINITION --query taskDefinition > .aws/task-definition.json
      
      - name: Fill in the new image ID in the Amazon ECS task definition
        id: task-def
        uses: aws-actions/amazon-ecs-render-task-definition@v1
        with:
          task-definition: .aws/task-definition.json
          container-name: ${{ env.CONTAINER_NAME }}
          image: ${{ env.ECR_REGISTRY }}/${{ env.ECR_REGISTRY_NAME }}/${{ env.ECR_REPOSITORY }}:${{ env.IMAGE_TAG }}
      
      - name: Deploy Amazon ECS task definition
        uses: aws-actions/amazon-ecs-deploy-task-definition@v1
        with: 
          task-definition: ${{ steps.task-def.outputs.task-definition }}
          service: ${{ env.ECS_SERVICE }}
          cluster: ${{ env.ECS_CLUSTER }}
          wait-for-service-stability: true
